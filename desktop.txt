
LOADING ANOTHER PAGE
==================================================
1)
    /* Redux */
    import { useAppDispatch, useAppSelector } from '../../../hooks';
    import {setLoading, setLoaded} from '../../../slices/navbarSlice';

2)
    const dispatch = useAppDispatch()

3)
       useEffect(()=>{
           
            //"Disable" the loading component
            dispatch(setLoaded())
      
        },[someDependency])

FETCHING DATA FOR THE LAYOUT
=================================================

import { getLayoutProps } from '../utils/layout_query'; //get the layout props, site settings, promo top bar banners

/*     const [isLoading, setIsLoading] = useState(true)
    const [siteSettings, setSiteSettings] = useState<siteSettingsProps>(null!);
    const [banners, setBanners] = useState<bannerItemProps[]>([]);
    const [categoriesList, setCategoriesList] = useState<collectionsListProps[]>([]);

    useEffect(() => {

      const fetchData = async () => {
        const result = await getLayoutProps()
        setSiteSettings(formatSiteSettings(result.sanityLayoutItems.sitesettings));
        setBanners(formatBannerItems(result.sanityLayoutItems.banners));
        setCategoriesList(formatCollectionsListResponse(result.shopifyCollectionsResponse.data.collections));
        setIsLoading(false);
      };
     

      fetchData();

    }, []); */

GET LAYOUT PROPS OLD QUERY
==================================================
/* QUERY LIST LAYOUT PROPS (Banners, footer text, etc..) 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

export const layoutQuery = `{
	'sitesettings': *[_type == 'siteSettings'][0]{
       title, description, 
       contactsList, socialMedias,
       footerText, aboutUs,
  },
  
  'banners': *[_type == 'banners']{
       text,
       link,
       color,
       timer
    }
}`

    //Types for each banner item
    export type bannerItemProps = {
      text: string;
      url?: string;
      theme: string;
      duration?: number;
    };

    //Formating and typing the output of sanity query
    export function formatBannerItems(input: any){
      let output: bannerItemProps[] = [];
      input.length > 0 && input.map((item: any)=>{
        output.push({
          text: item.text,
          url: item.link,
          theme: `promoBar-theme-${item.color.toLowerCase()}`,
          duration: item.timer
        })
      })

      return output
    }

     //Types for each banner item
     export type siteSettingsProps = {

        title: string;
        description: string;
        footerText: string;

        aboutUs: {
          imageURL: string;
          text: string;
        },

        contactsList: {
          type: string;
          contact: string;
        }[],

        socialMedias: {
          name: string;
          link: string;
        }[],


    };

    //Formating and typing the output of sanity query
    export function formatSiteSettings(input: any){

      let output: siteSettingsProps ={

        title: input.title,
        description: input.description,
        footerText: input.footerText,

        aboutUs: {
          imageURL: sanityUrlFor(input.aboutUs.image),
          text: input.aboutUs.text,
        },

        contactsList: input.contactsList.map((item: any)=>{

          return { 
            type: item.type,
            contact: item.contact
          }  

        }),

        socialMedias: input.socialMedias.map((item: any)=>{

          return { 
            name: item.name,
            link: item.link
          }  

        }),

      }

      return output

    }


    